//Setup
import com.leapmotion.leap.*;
Controller controller = new Controller();
Frame frame = controller.frame(); //This current frame


//Split screen
PGraphics pg[];
int winSize = 600;
int scrnSize = winSize * 3 / 4;
int screenCoords[] = {0,0};
float angleRotated = 0;

//????
boolean notSet = true;


//Position
int x = 0;
int y = 0;
int z = 0;
int prevX = 0;
int prevY = 0;
int prevZ = 0;


//Gesture
public enum allGesture{SWIPE, POINTING, HANDOUT, PINCH, CIRCLE};
allGesture currGesture = allGesture.HANDOUT;
allGesture prevGesture = allGesture.HANDOUT;


//Mode
public enum mode{DRAWING3D, DRAGDROP, GRAPH};
mode currMode = mode.DRAWING3D;

void setup(){
  pg = new PGraphics[4];
  //size(displayWidth, displayHeight,P3D);
  size(600, 600,P3D);
  for(int i = 0; i < 4; i++){
      pg[i] = createGraphics(scrnSize, scrnSize, P3D);
  }
}

void draw(){
  ///////SET UP FRAME AND HAND/////////
  background(0);//clear screen
  frame = controller.frame();
  Hand hand = frame.hands().frontmost(); //frontmost hand
  
  for(Gesture gesture : frame.gestures())
  {
      if(gesture.type() == Gesture.Type.TYPE_CIRCLE){
        println("FOUND");
        circleCount++;
      }
  }

  
  ////GET THE GESTURE
  if(checkPinch()) currGesture = allGesture.PINCH;
  if(checkPoint()) currGesture = allGesture.POINTING;
  if(checkCircle()) currGesture = allGesture.CIRCLE;
  if(checkHandout()) currGesture = allGesture.HANDOUT;
  if(checkSwipe() != 0) currGesture = allGesture.SWIPE;
  
  
  ////GET THE POSITIOM
  Vector pos = hand.palmPosition();
  y = -2*int(pos.getX());
  x = -2*int(pos.getY())+150;
  z = 2*int(pos.getZ());
  temp = new PVector(x,y,z);
  //println("x : "+ x + 
  //" y : "+ y +" z : "+ z);
  
  ////DRAWING
  switch (currMode) {
    case DRAWING3D:
      drawDrawing3d();
      break;
    case DRAGDROP:
      drawDrawing3d();
      break;
    case GRAPH:
      drawDrawing3d();
      break;
  }
  
  prevX = x;
  prevY = y;
  prevZ = z;
  prevGesture = currGesture;
  
}



/* this is the first part of a two method series required for hologram, in between
 the actual objects will be drawn using drawSphere.
 */
void drawHolo() {
  translate(width/2,height/2,10);
  // so that each of the split screens will be rotated at 0 90 180 and 270 degrees 
  // so that the squares turn into rectangles and then diamonds to  be oriented correct
  rotateZ(PI/4);
  // so that we redraw the picture each time
  background(0);
  // this cycles through all of the split screens and draws each
  for(int i = 0; i< 4; i++){
   pg[i].beginDraw();
   // background of the split screens
   pg[i].background(0);
   pg[i].stroke(255);
   // maintains the rotations already produced for when these are poped
   pg[i].pushMatrix();
   // so that the start of each image is started away from the left edge of the 
   // split screen
   pg[i].rotateZ(PI/4);
   // this is so that the objects are not in the middle and so they are far enough away
   // to be used this way
   pg[i].translate(width/4, 0, -200);
   executesideRotation(pg[i], i);
   pg[i].rotateX(mouseX/float(width) * 2 * PI);
   //translate leapmotion coordinates and display coords
   pg[i].stroke(0,0,255);
   pg[i].line(100,0,0,0,0,0);
   pg[i].stroke(0,255,0);
   pg[i].line(0,0,100,0,0,0);
   
   //pg[i].rotateZ(PI/2);
   // all drawing here
   drawAllTraces(pg[i]);
   drawMenu(pg[i]);
   //drawCursor();
   pg[i].noFill();
   pg[i].popMatrix();
   pg[i].endDraw();
   image(pg[i],screenCoords[0],screenCoords[1]);
   // moves the coordinate for the next split screen so that it is rotated 90 degrees
   rotateZ(PI/2);
  }
  // helps for centering and to tell us where the x coordinate is
  text(mouseX, 0,0);
  
  

}


void drawAllTraces(PGraphics pg) {
  //Line attributes
  pg.stroke(126); //color of the border
  pg.strokeWeight(10); //width of the stroke
  pg.noFill(); //??
  
  
  
  switch (currMode){
  
  ////ERASING
  case DRAWING3D:
    //drawing history of strokes
    for (int i = 0; i< strokes.size(); i++)
    {
      ArrayList<PVector> stroke = strokes.get(i);
      Float angle = angles.get(i);
      pg.rotateX(angle);
      pg.beginShape();
      for (PVector p : stroke)
      {
        pg.stroke(p.z); //color is determined by z axis
        pg.vertex(p.x,p.y,p.z);
      }
      pg.endShape();
      pg.rotateX(-angle);
    }
    
    
    
    
    //drawing current stroke
    pg.rotateX(-mouseX/float(width) * 2 * PI);
    pg.beginShape();
    
    for (PVector p: points)
    {
        pg.stroke(p.z);
        pg.vertex(p.x,p.y,p.z);
    }
    
    pg.endShape();
    pg.rotateX(+mouseX/float(width) * 2 * PI);
    
    
    
    
    //add cursor only if not all the fingers are extended or you're pinching
    if(currGesture != allGesture.HANDOUT)
    {
      pg.rotateX(-mouseX/float(width) * 2 * PI);
      pg.strokeWeight(1); 
      pg.fill(127,0,0); //red
      if (currDrawModeOn) fill(0,127,0); //green
      pg.noStroke();
      pg.lights();
    //  pg.pushMatrix();
      pg.translate(x, y, z);
      pg.sphere(10);
      pg.rotateX(+mouseX/float(width) * 2 * PI);
      //pg.popMatrix();
    }
  }
}

// rotates the coordinate system so that the system will be what is necessary for the 
// creation of the matrix
void executesideRotation(PGraphics pg, int side) {
  if(side==2) {
     pg.rotateZ(PI);
     pg.rotateY(PI);
   }
   else if(side==3){
     pg.rotateX(3*PI/2);
     
   }
   else if(side==1){
     pg.rotateX(PI/2);
   }
}

void drawShape(PGraphics shp, int z){
   shp.beginShape();
   shp.vertex(0,0,0*z);
   shp.vertex(0,0,100*z);
   shp.vertex(100,100,0*z);
   shp.vertex(10,100,100*z);
   shp.vertex(100,10,10*z);
   shp.vertex(0,0,0*z);
   shp.endShape();
}

void drawCursor(){
     //add cursor only if not all the fingers are extended or you're pinching
  if(numExtended(frame) < 5 || currDrawModeOn)
  {
    strokeWeight(1); 
    fill(127,0,0); //red
    if (currDrawModeOn) 
    {
      fill(0,127,0); //green
    }
    noStroke();
    lights();
    pushMatrix();
    translate(x, y, z);
    sphere(10);
    popMatrix();
  }
}